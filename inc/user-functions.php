<?php
defined( 'ABSPATH' ) || exit;

// ==================================================
// üìö SOMMAIRE DU FICHIER
// ==================================================
//
// 1. üì¶ TEMPLATES UTILISATEURS
//    - Routage personnalis√© de /mon-compte/ vers des templates d√©di√©s
//
// 2. üì¶ MODIFICATION AVATAR EN FRONT
//    - Gestion compl√®te de l‚Äôupload, affichage et remplacement de l‚Äôavatar utilisateur
//
// 3. üì¶ TUILES UTILISATEUR
//    - Affichage dynamique des √©l√©ments li√©s √† l‚Äôutilisateur (commandes WooCommerce)
//
// 4. üì¶ ATTRIBUTION DE R√îLE
//     - Attribution des r√¥les oragnisateurs (cr√©ation)
//


// ==================================================
// üì¶ TEMPLATES UTILISATEURS
// ==================================================
/**
 * üîπ ajouter_rewrite_rules ‚Üí D√©clarer les r√®gles de r√©√©criture pour les URL personnalis√©es de l‚Äôespace "Mon Compte".
 * üîπ ajouter_query_vars ‚Üí D√©clarer les variables de requ√™te personnalis√©es associ√©es aux URL de l‚Äôespace utilisateur.
 * üîπ charger_template_utilisateur ‚Üí Charger dynamiquement un template sp√©cifique selon l‚ÄôURL dans "Mon Compte".
 * üîπ modifier_titre_onglet ‚Üí Modifier dynamiquement le titre de la page dans l'onglet du navigateur.
 * üîπ is_woocommerce_account_page ‚Üí V√©rifier si la page actuelle est une sous-page WooCommerce dans "Mon Compte".
 */


/**
 * Charge dynamiquement un template sp√©cifique en fonction de l'URL sous /mon-compte/.
 *
 * Cette fonction intercepte l'affichage des templates WordPress et remplace le fichier de template 
 * si l'URL demand√©e correspond √† une page sp√©cifique de l'espace utilisateur (ex: organisateurs, administrateurs).
 *
 * @param string $template Le chemin du template par d√©faut d√©termin√© par WordPress.
 * @return string Le chemin du fichier de template personnalis√© ou le template par d√©faut.
 */
 function ajouter_rewrite_rules() {
    add_rewrite_rule('^mon-compte/organisateurs/inscription/?$', 'index.php?mon_compte_organisateurs_inscription=1', 'top');
    add_rewrite_rule('^mon-compte/organisateurs/paiements/?$', 'index.php?mon_compte_organisateurs_paiements=1', 'top');
    add_rewrite_rule('^mon-compte/statistiques/?$', 'index.php?mon_compte_statistiques=1', 'top');
    add_rewrite_rule('^mon-compte/outils/?$', 'index.php?mon_compte_outils=1', 'top');
}
add_action('init', 'ajouter_rewrite_rules');

/**
 * ‚ûï D√©clare les variables de requ√™te personnalis√©es associ√©es aux URL de l‚Äôespace utilisateur.
 *
 * Ces variables sont n√©cessaires pour que WordPress reconnaisse les URL r√©√©crites
 * comme valides et les transmette aux hooks `template_include`.
 *
 * @param array $vars Tableau des variables de requ√™te connues.
 * @return array Tableau enrichi avec les nouvelles variables personnalis√©es.
 *
 * @hook query_vars
 */
function ajouter_query_vars($vars) {
    $vars[] = 'mon_compte_organisateurs_inscription';
    $vars[] = 'mon_compte_organisateurs_paiements';
    $vars[] = 'mon_compte_statistiques';
    $vars[] = 'mon_compte_outils';
    return $vars;
}
add_filter('query_vars', 'ajouter_query_vars');

/**
 * üì¶ Charge dynamiquement un template sp√©cifique pour certaines URL de l'espace utilisateur.
 *
 * Cette fonction intercepte l‚Äôinclusion du template principal WordPress (`template_include`)
 * et remplace le fichier de template par d√©faut si l‚ÄôURL correspond √† l‚Äôune des URL personnalis√©es
 * d√©finies via les r√®gles de r√©√©criture.
 *
 * - Ignore les endpoints WooCommerce pour √©viter les conflits.
 * - V√©rifie l‚Äôexistence des fichiers de template personnalis√©s dans `/templates/admin/`.
 * - Active un logging (`error_log`) utile au d√©bogage.
 *
 * @param string $template Le chemin du template par d√©faut d√©termin√© par WordPress.
 * @return string Le chemin du fichier de template personnalis√© ou le template par d√©faut.
 *
 * @hook template_include
 */
function charger_template_utilisateur($template) {
    // R√©cup√©ration et nettoyage de l'URL demand√©e
    $request_uri = trim($_SERVER['REQUEST_URI'], '/');

    // V√©rification pour √©viter les conflits avec WooCommerce
    if (is_wc_endpoint_url()) {
        return $template;
    }
    
    // Liste des chemins d‚ÄôURL associ√©s √† leurs fichiers de template respectifs
    $mapping_templates = array(
        'mon-compte/organisateurs'        => 'organisateurs.php',
        'mon-compte/organisateurs/'       => 'organisateurs.php', // Variante avec /
        'mon-compte/statistiques'         => 'statistiques.php',
        'mon-compte/outils'               => 'outils.php',
    );

    // V√©rification si l'URL correspond √† un template sp√©cifique
    if (array_key_exists($request_uri, $mapping_templates)) {
        $custom_template = get_stylesheet_directory() . '/templates/admin/' . $mapping_templates[$request_uri];
        
        if (!file_exists($custom_template)) {
            error_log('Fichier de template introuvable : ' . $custom_template);
        }
        error_log('Chargement du template : ' . $custom_template);

        // V√©rification de l'existence du fichier avant de le retourner
        if (file_exists($custom_template)) {
            return $custom_template;
        }
    }
    // Retourne le template par d√©faut si aucune correspondance n'est trouv√©e
    return $template;
}
add_filter('template_include', 'charger_template_utilisateur');

/**
 * Modifier dynamiquement le titre de la page dans l'onglet du navigateur
 *
 * @param string $title Le titre actuel.
 * @return string Le titre modifi√©.
 */
function modifier_titre_onglet($title) {
    global $wp;
    $current_url = trim($wp->request, '/');

    // D√©finition des titres pour chaque page
    $page_titles = [
        'mon-compte/statistiques'              => 'Statistiques - Chasses au Tr√©sor',
        'mon-compte/outils'                    => 'Outils - Chasses au Tr√©sor',
        'mon-compte/organisateurs'             => 'Organisateur - Chasses au Tr√©sor',
    ];

    // Si l‚ÄôURL correspond √† une page d√©finie, modifier le titre
    if (isset($page_titles[$current_url])) {
        return $page_titles[$current_url];
    }

    return $title; // Conserver le titre par d√©faut si l'URL ne correspond pas
}
add_filter('pre_get_document_title', 'modifier_titre_onglet');

/**
 * V√©rifie si la page actuelle est une page WooCommerce sp√©cifique dans "Mon Compte".
 *
 * Cette fonction analyse l'URL actuelle et d√©termine si elle correspond √† l'une
 * des pages WooCommerce sp√©cifiques o√π le contenu du compte WooCommerce doit √™tre affich√©.
 *
 * Liste des pages WooCommerce prises en compte :

 *
 * @return bool True si la page actuelle est une page WooCommerce autoris√©e, False sinon.
 */
function is_woocommerce_account_page() {
    // R√©cup√©rer l'URL actuelle
    $current_url = $_SERVER['REQUEST_URI'];

    // Liste des pages WooCommerce o√π afficher woocommerce_account_content()
    $pages_woocommerce = [
        '/mon-compte/commandes/',
        '/mon-compte/voir-commandes/',
        '/mon-compte/modifier-adresse/',
        '/mon-compte/modifier-compte/',
        '/mon-compte/telechargements/',
        '/mon-compte/moyens-paiement/',
        '/mon-compte/lost-password/',
        '/mon-compte/customer-logout/'
    ];

    // V√©rifier si l'URL actuelle correspond √† une page WooCommerce autoris√©e
    foreach ($pages_woocommerce as $page) {
        if (strpos($current_url, $page) === 0) {
            return true;
        }
    }

    return false;
}


// ==================================================
// üì¶ MODIFICATION AVATAR EN FRONT
// ==================================================
/**
 * üîπ upload_user_avatar ‚Üí Traiter l‚Äôupload d‚Äôun avatar utilisateur via AJAX.
 * üîπ autoriser_avatars_upload ‚Üí Autoriser les formats d‚Äôimage pour l‚Äôupload d‚Äôavatars personnalis√©s.
 * üîπ remplacer_avatar_utilisateur ‚Üí Remplacer l‚Äôavatar par d√©faut par celui d√©fini par l‚Äôutilisateur.
 * üîπ charger_script_avatar_upload ‚Üí Charger le script JS d‚Äôupload uniquement sur les pages commen√ßant par "/mon-compte/".
 */


/**
 * üñºÔ∏è Traiter l'upload d'un avatar utilisateur via AJAX.
 *
 * Cette fonction est appel√©e via l'action AJAX `wp_ajax_upload_user_avatar` c√¥t√© authentifi√©.
 * Elle permet √† un utilisateur connect√© de t√©l√©verser une image personnalis√©e en tant qu'avatar.
 *
 * √âtapes :
 * - V√©rifie que l‚Äôutilisateur est connect√©.
 * - Valide la pr√©sence, le format (JPG, PNG, GIF, WEBP) et la taille du fichier (2 Mo max).
 * - G√®re le t√©l√©versement du fichier via `wp_handle_upload()`.
 * - Enregistre l‚ÄôURL dans la meta `user_avatar`.
 * - Retourne une r√©ponse JSON avec l‚ÄôURL du nouvel avatar.
 *
 * üîê S√©curit√© :
 * - Seuls les utilisateurs connect√©s peuvent utiliser ce point d‚Äôentr√©e.
 * - La validation du type MIME et de la taille emp√™che les uploads malveillants.
 *
 * üí° Remarque :
 * - Cette fonction n'utilise pas `media_handle_upload()` mais `wp_handle_upload()` directement,
 *   ce qui est plus l√©ger mais ne cr√©e pas de pi√®ce jointe dans la m√©diath√®que.
 *
 * @return void R√©ponse JSON (succ√®s ou erreur) via `wp_send_json_*`.
 *
 * @hook wp_ajax_upload_user_avatar
 */
add_action('wp_ajax_upload_user_avatar', 'upload_user_avatar');
function upload_user_avatar() {
    // üõë V√©rifie si l'utilisateur est connect√©
    if (!is_user_logged_in()) {
        wp_send_json_error(['message' => 'Vous devez √™tre connect√©.']);
    }

    $user_id = get_current_user_id();

    // üìå V√©rifie si un fichier a √©t√© envoy√©
    if (!isset($_FILES['avatar'])) {
        wp_send_json_error(['message' => 'Aucun fichier re√ßu.']);
    }

    $file = $_FILES['avatar'];
    $max_size = 2 * 1024 * 1024; // üîπ 2 Mo
    $allowed_types = ['image/jpeg', 'image/png', 'image/gif', 'image/webp'];

    // üõë V√©rifie la taille du fichier
    if ($file['size'] > $max_size) {
        wp_send_json_error(['message' => 'Taille d√©pass√©e : 2 Mo max.']);
    }

    // üõë V√©rifie le type MIME du fichier
    if (!in_array($file['type'], $allowed_types)) {
        wp_send_json_error(['message' => 'Format non autoris√©. Formats autoris√©s : JPG, PNG, GIF, WEBP.']);
    }

    // üìå D√©placer et enregistrer l‚Äôimage
    require_once ABSPATH . 'wp-admin/includes/file.php';
    $upload = wp_handle_upload($file, ['test_form' => false]);

    // ‚úÖ V√©rification de `$upload` avant d'aller plus loin
    if (!$upload || isset($upload['error'])) {
        wp_send_json_error(['message' => 'Erreur lors du t√©l√©versement : ' . ($upload['error'] ?? 'Inconnue')]);
    }

    // üìå Mettre √† jour l‚Äôavatar dans la base de donn√©es
    update_user_meta($user_id, 'user_avatar', $upload['url']);

    // üìå R√©pondre en JSON avec l'URL de l'image
    $avatar_url = get_user_meta($user_id, 'user_avatar', true);
    wp_send_json_success([
        'message' => 'Image mise √† jour avec succ√®s.',
        'new_avatar_url' => esc_url($avatar_url)
    ]);
}


/**
 * üìå Autorise les formats d'image pour l'upload des avatars.
 *
 * @param array $mimes Liste des types MIME autoris√©s.
 * @return array Liste mise √† jour avec les formats accept√©s.
 */
function autoriser_avatars_upload($mimes) {
    $mimes['jpg'] = 'image/jpeg';
    $mimes['jpeg'] = 'image/jpeg';
    $mimes['png'] = 'image/png';
    $mimes['gif'] = 'image/gif';
    $mimes['webp'] = 'image/webp'; // ‚úÖ Ajout du format WebP
    return $mimes;
}
add_filter('upload_mimes', 'autoriser_avatars_upload');

/**
 * üìå Remplace l'avatar par d√©faut par l'avatar personnalis√© de l'utilisateur.
 *
 * @param string $avatar Code HTML de l'avatar par d√©faut.
 * @param mixed $id_or_email Identifiant ou email de l'utilisateur.
 * @param int $size Taille de l'avatar.
 * @param string $default Avatar par d√©faut si aucun avatar personnalis√© n'est trouv√©.
 * @param string $alt Texte alternatif de l'avatar.
 * @return string HTML de l'avatar personnalis√© ou avatar par d√©faut.
 */
function remplacer_avatar_utilisateur($avatar, $id_or_email, $size, $default, $alt) {
    $user_id = 0;

    // üîπ V√©rifie si l'entr√©e est un ID, un objet ou un email
    if (is_numeric($id_or_email)) {
        $user_id = $id_or_email;
    } elseif (is_object($id_or_email) && isset($id_or_email->user_id)) {
        $user_id = $id_or_email->user_id;
    } elseif (is_string($id_or_email)) {
        $user = get_user_by('email', $id_or_email);
        if ($user) {
            $user_id = $user->ID;
        }
    }

    // üìå V√©rifie si l'utilisateur a un avatar enregistr√© en base
    $avatar_url = get_user_meta($user_id, 'user_avatar', true);

    if (!empty($avatar_url)) {
        return "<img src='" . esc_url($avatar_url) . "' alt='" . esc_attr($alt) . "' width='{$size}' height='{$size}' class='avatar avatar-{$size} photo' />";
    }

    return $avatar;
}
add_filter('get_avatar', 'remplacer_avatar_utilisateur', 10, 5);

/**
 * üìå Charge le fichier JavaScript uniquement sur les pages commen√ßant par "/mon-compte/"
 */
function charger_script_avatar_upload() {
    if (strpos($_SERVER['REQUEST_URI'], '/mon-compte/') === 0) {
        wp_enqueue_script(
            'avatar-upload',
            get_stylesheet_directory_uri() . '/assets/js/avatar-upload.js',
            [],
            null,
            true
        );
    }
}
add_action('wp_enqueue_scripts', 'charger_script_avatar_upload');



// ==================================================
// üì¶ TUILES UTILISATEUR
// ==================================================
/**
 * üîπ afficher_commandes_utilisateur ‚Üí R√©cup√©rer et afficher les 4 derni√®res commandes d‚Äôun utilisateur WooCommerce sous forme de tableau.
 */


/**
 * R√©cup√®re et affiche les 3 derni√®res commandes d'un utilisateur WooCommerce sous forme de tableau.
 *
 * @param int $user_id ID de l'utilisateur connect√©.
 * @param int $limit Nombre de commandes √† afficher (par d√©faut : 4).
 * @return string HTML du tableau des commandes ou une cha√Æne vide si aucune commande.
 */
function afficher_commandes_utilisateur($user_id, $limit = 4) {
    if (!$user_id || !class_exists('WooCommerce')) {
        return '';
    }

    $customer_orders = wc_get_orders([
        'limit'    => $limit,
        'customer' => $user_id,
        'status'   => ['wc-completed'], // Commandes valides
        'orderby'  => 'date',
        'order'    => 'DESC'
    ]);
    
    if (empty($customer_orders)) {
        return ''; // Ne rien afficher si aucune commande
    }

    ob_start(); // Capture l'affichage HTML
    ?>
    <table class="stats-table">
        <tbody>
            <?php foreach ($customer_orders as $order) : ?>
                <?php
                $order_id = $order->get_id();
                $order_date = wc_format_datetime($order->get_date_created(), 'd/m/Y');
                $items = $order->get_items();
                $first_item = reset($items); // R√©cup√®re le premier produit de la commande
                $product_name = $first_item ? $first_item->get_name() : 'Produit inconnu';
                ?>
                <tr>
                    <td>#<?php echo esc_html($order_id); ?></td>
                    <td><?php echo esc_html($product_name); ?></td>
                    <td><?php echo esc_html($order_date); ?></td>
                </tr>
            <?php endforeach; ?>
        </tbody>
    </table>
    <?php
    return ob_get_clean(); // Retourne le HTML captur√©
}



// ==================================================
// üì¶ ATTRIBUTION DE R√îLE
// ==================================================
/**
 * üîπ ajouter_role_organisateur_creation() ‚Üí Ajoute le r√¥le "organisateur_creation" √† un abonn√© apr√®s la cr√©ation CONFIRM√âE d'un CPT "organisateur"
 */

/**
 * üìå Ajoute le r√¥le "organisateur_creation" √† un abonn√© apr√®s la cr√©ation CONFIRM√âE d'un CPT "organisateur".
 *
 * - V√©rifie que l'utilisateur est "subscriber" avant de modifier son r√¥le.
 * - V√©rifie que le post n'est pas en mode "auto-draft" (cr√©ation en cours).
 * - Ne touche AUCUN autre r√¥le (admin, organisateur...).
 *
 * @param int      $post_id ID du post enregistr√©.
 * @param WP_Post  $post    Objet du post.
 * @param bool     $update  Indique si le post est mis √† jour ou nouvellement cr√©√©.
 * @return void
 */
function ajouter_role_organisateur_creation($post_id, $post, $update) {
    // üîπ V√©rifie que le post est bien un CPT "organisateur"
    if ($post->post_type !== 'organisateur') {
        return;
    }

    // üîπ V√©rifie si le post est un "auto-draft" (pas encore enregistr√© par l'utilisateur)
    if ($post->post_status === 'auto-draft') {
        return;
    }

    $user_id = get_current_user_id();
    $user = new WP_User($user_id);

    // üîπ V√©rifie si l'utilisateur est "subscriber" avant de lui attribuer "organisateur_creation"
    if (in_array('subscriber', $user->roles, true)) {
        $user->add_role('organisateur_creation'); // ‚úÖ Ajoute le r√¥le sans retirer "subscriber"
        error_log("‚úÖ L'utilisateur $user_id a maintenant aussi le r√¥le 'organisateur_creation'.");
    }
}
add_action('save_post', 'ajouter_role_organisateur_creation', 10, 3);

